import Meal from "../models/Meal.js";
import UserProfile from "../models/UserProfile.js";
import { aiService } from "../service/ai.service.js";

/**
 * User controller function
 * @param {import('express').Request} req - Express request object
 * @param {import('express').Response} res - Express response object
 */

export function rapports(req, res) {
  res.render("rapports");
}

/**
 * User controller function
 * @param {import('express').Request} req - Express request object
 * @param {import('express').Response} res - Express response object
 */

export async function rapportService(req, res) {
  const userId = req.session.user.id;
  const { reportType } = req.body; // Get report type from request body

  const meals = await Meal.getByUerId(userId);
  const userProfile = await UserProfile.findByUserId(userId);

  if (!userProfile) {
    return res.status(400).json({
      error: true,
      message: "Profil utilisateur introuvable. Merci de le compl√©ter.",
    });
  }

  if (meals.length === 0) {
    return res.status(400).json({
      error: true,
      message: "Aucun repas trouv√©. Merci d‚Äôajouter vos repas.",
    });
  }

  const mealsDescription = meals
    .map((meal) => `- ${meal.body} (${meal.created_at})`)
    .join("\n");

  // Determine report focus based on type
  let reportFocus = "";
  switch (reportType) {
    case "1":
      reportFocus =
        "Fournir un rapport nutritionnel complet avec toutes les sections d√©taill√©es.";
      break;
    case "2":
      reportFocus =
        "Mettre l'accent principal sur l'analyse d√©taill√©e des macronutriments (glucides, prot√©ines, lipides).";
      break;
    case "3":
      reportFocus =
        "Se concentrer principalement sur le bilan calorique avec analyse approfondie des calories.";
      break;
    case "4":
      reportFocus =
        "Prioriser l'analyse de l'hydratation et des besoins en eau.";
      break;
    case "5":
      reportFocus =
        "Cr√©er un rapport personnalis√© adapt√© sp√©cifiquement au profil et aux objectifs de l'utilisateur.";
      break;
    default:
      reportFocus = "Fournir un rapport nutritionnel complet.";
  }

  const prompt = `
Vous √™tes un assistant sp√©cialis√© en nutrition.
Votre t√¢che est de g√©n√©rer un **rapport nutritionnel quotidien personnalis√©** au format structur√© (Markdown ‚Üí HTML).

### Profil Utilisateur
${JSON.stringify(userProfile, null, 2)}

### Historique des Repas
${mealsDescription}

### Focus du Rapport
${reportFocus}

### Instructions pour le Rapport :
1. Fournir un **bilan calorique global** (calories consomm√©es, objectif estim√©, diff√©rence).
2. D√©tailler les **macronutriments** (glucides, prot√©ines, lipides) avec comparaison aux besoins estim√©s.
3. Lister les **repas de la journ√©e** (nom, heure, calories, remarque sant√© si n√©cessaire).
4. Ajouter la partie **hydratation** (consomm√© vs cible recommand√©e).
5. Donner des **recommandations personnalis√©es** adapt√©es au profil (athl√®te, diab√©tique, perte de poids, etc.).
6. Retourner le tout en **HTML structur√© simple** avec sections bien organis√©es.

‚ö†Ô∏è IMPORTANT: Utilisez une structure HTML claire avec des sections distinctes pour chaque partie.

Exemple de structure attendue :
<div>
  <h2>Rapport Nutritionnel Quotidien</h2>
  <p>Date: ${new Date().toLocaleDateString("fr-FR")}</p>
</div>

<div>
  <h3>üî• Bilan Calorique</h3>
  <ul>
    <li><strong>Consomm√©es:</strong> [nombre] kcal</li>
    <li><strong>Objectif:</strong> [nombre] kcal</li>
    <li><strong>Diff√©rence:</strong> [nombre] kcal</li>
  </ul>
</div>

<div>
  <h3>üìä Macronutriments</h3>
  <table>
    <thead>
      <tr><th>Nutriment</th><th>Consomm√©</th><th>Objectif</th><th>Status</th></tr>
    </thead>
    <tbody>
      <tr><td>Prot√©ines</td><td>[nombre]g</td><td>[nombre]g</td><td>[status]</td></tr>
      <tr><td>Glucides</td><td>[nombre]g</td><td>[nombre]g</td><td>[status]</td></tr>
      <tr><td>Lipides</td><td>[nombre]g</td><td>[nombre]g</td><td>[status]</td></tr>
    </tbody>
  </table>
</div>

<div>
  <h3>üçΩÔ∏è Repas de la journ√©e</h3>
  <ul>
    <li><strong>[Nom du repas]</strong> - [heure] : [calories] kcal</li>
  </ul>
</div>

<div>
  <h3>üíß Hydratation</h3>
  <p><strong>Consommation d'eau:</strong> [nombre] L / [objectif] L</p>
</div>

<div>
  <h3>üí° Recommandations personnalis√©es</h3>
  <p>[recommandations adapt√©es au profil utilisateur]</p>
</div>
`;

  const rapport = await aiService(prompt);
  res.json({ rapport });
}
