<div class="mb-6">
  <h2 class="text-2xl font-bold text-gray-900">
    G√©n√©rateur de Rapports Hebdomadaires
  </h2>
  <p class="text-gray-600">
    Cr√©ez et t√©l√©chargez vos rapports nutritionnels hebdomadaires sp√©cialis√©s en
    format PDF ou HTML
  </p>
</div>
<!-- Report Preview Section -->
<div class="bg-white rounded-lg shadow-lg border border-gray-200">
  <div class="p-4 sm:p-6 border-b border-gray-200">
    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
      <h3 class="text-lg sm:text-xl font-semibold text-gray-900 mb-2 sm:mb-0">
        Aper√ßu du Rapport
      </h3>
      <div class="flex items-center space-x-2">
        <span
          id="previewStatus"
          class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800"
        >
          <i class="fas fa-eye mr-1"></i>
          En attente
        </span>
      </div>
    </div>
  </div>

  <!-- Preview Content -->
  <div class="p-6">
    <div id="reportPreview" class="min-h-64">
      <!-- Default state -->
      <div id="previewPlaceholder" class="text-center py-12">
        <div
          class="inline-flex items-center justify-center w-16 h-16 bg-gray-100 rounded-full mb-4"
        >
          <i class="fas fa-file-alt text-gray-400 text-2xl"></i>
        </div>
        <h4 class="text-lg font-medium text-gray-900 mb-2">
          Aucun rapport g√©n√©r√©
        </h4>
        <p class="text-gray-600">
          S√©lectionnez une date et cliquez sur "G√©n√©rer le Rapport" pour voir
          l'aper√ßu
        </p>
      </div>

      <!-- Loading state -->
      <div id="previewLoading" class="text-center py-12 hidden">
        <div
          class="inline-flex items-center justify-center w-16 h-16 bg-blue-100 rounded-full mb-4"
        >
          <i class="fas fa-spinner fa-spin text-blue-600 text-2xl"></i>
        </div>
        <h4 class="text-lg font-medium text-gray-900 mb-2">
          G√©n√©ration en cours...
        </h4>
        <p class="text-gray-600">
          Veuillez patienter pendant que nous cr√©ons votre rapport
        </p>
      </div>

      <!-- Preview content will be inserted here -->
      <div id="previewContent" class="hidden">
        <!-- Report content will be dynamically loaded here -->
      </div>
    </div>
  </div>
</div>
<br />
<!-- Report Generation Controls -->
<div class="bg-white rounded-lg shadow p-6 mb-8">
  <div class="mb-6">
    <h3 class="text-lg font-semibold text-gray-900 mb-4">
      Configuration du Rapport
    </h3>

    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
      <!-- Date Selection -->
      <div>
        <label
          for="reportDate"
          class="block text-sm font-medium text-gray-700 mb-2"
        >
          <i class="fas fa-calendar mr-2 text-blue-500"></i>Date du rapport
          (aujourd'hui)
        </label>
        <input
          type="date"
          id="reportDate"
          readonly
          class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 cursor-not-allowed focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          title="Les rapports sont g√©n√©r√©s pour la date d'aujourd'hui uniquement"
        />
      </div>

      <!-- Report Type -->
      <div>
        <label
          for="reportType"
          class="block text-sm font-medium text-gray-700 mb-2"
        >
          <i class="fas fa-chart-line mr-2 text-green-500"></i>Type de rapport
          hebdomadaire
        </label>
        <select
          id="reportType"
          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        >
          <option value="medical">üè• Suivi m√©dical - Patients</option>
          <option value="athlete">üèÉ‚Äç‚ôÇÔ∏è Suivi sportif - Athl√®tes</option>
          <option value="weight">‚öñÔ∏è Gestion du poids</option>
        </select>
      </div>

      <!-- Format Selection -->
      <div>
        <label
          for="reportFormat"
          class="block text-sm font-medium text-gray-700 mb-2"
        >
          <i class="fas fa-file-pdf mr-2 text-red-500"></i>Format de sortie
        </label>
        <select
          id="reportFormat"
          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        >
          <option value="pdf">PDF</option>
          <option value="html">HTML</option>
        </select>
      </div>
    </div>

    <!-- Generate Button -->
    <div class="mt-6 flex flex-col sm:flex-row gap-4">
      <button
        id="generateReportBtn"
        class="flex-1 bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors duration-200 flex items-center justify-center"
        onclick="generateReport()"
      >
        <i class="fas fa-magic mr-2"></i>
        G√©n√©rer le Rapport
      </button>

      <button
        id="downloadReportBtn"
        class="flex-1 bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg font-medium transition-colors duration-200 flex items-center justify-center disabled:bg-gray-400 disabled:cursor-not-allowed"
        disabled
      >
        <i class="fas fa-download mr-2"></i>
        T√©l√©charger
      </button>
    </div>
  </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script>
  let currentReportData = null;
  let currentReportFormat = "pdf";

  document.addEventListener("DOMContentLoaded", initializeApp);

  function initializeApp() {
    setDefaultDate();
    bindEventListeners();
  }

  function setDefaultDate() {
    const today = new Date().toISOString().split("T")[0];
    const dateInput = document.getElementById("reportDate");
    if (dateInput) {
      dateInput.value = today;
    }
  }

  function bindEventListeners() {
    const generateBtn = document.getElementById("generateReportBtn");
    const downloadBtn = document.getElementById("downloadReportBtn");
    const formatSelect = document.getElementById("reportFormat");

    if (generateBtn) {
      generateBtn.addEventListener("click", generateReport);
    } else {
      console.error("Generate button not found!");
    }

    if (downloadBtn) {
      downloadBtn.addEventListener("click", downloadReport);
    } else {
      console.error("Download button not found!");
    }

    if (formatSelect) {
      formatSelect.addEventListener("change", function () {
        currentReportFormat = this.value;
        console.log("Format changed to:", currentReportFormat);
      });
    } else {
      console.error("Format select not found!");
    }
  }

  function generateReport() {
    const formData = getFormData();

    if (!validateForm(formData)) {
      return;
    }

    showLoadingState();
    updatePreviewStatus("G√©n√©ration...", "bg-yellow-100 text-yellow-800");

    sendReportRequest(formData)
      .then(handleReportSuccess)
      .catch(handleReportError);
  }

  function getFormData() {
    return {
      reportDate: document.getElementById("reportDate").value,
      reportType: document.getElementById("reportType").value,
      reportFormat: document.getElementById("reportFormat").value,
    };
  }

  function validateForm(formData) {
    if (!formData.reportDate) {
      alert("Veuillez s√©lectionner une date pour le rapport");
      return false;
    }
    return true;
  }

  function sendReportRequest(formData) {
    return fetch("/rapport-service", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      credentials: "include",
      body: JSON.stringify({
        reportType: formData.reportType,
      }),
    })
      .then((response) => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then((data) => {
        if (data.error) {
          throw new Error(data.message);
        }
        return { data, formData };
      });
  }

  function handleReportSuccess({ data, formData }) {
    currentReportData = {
      date: new Date(formData.reportDate).toLocaleDateString("fr-FR"),
      type: formData.reportType,
      htmlContent: data.rapport,
    };
    currentReportFormat = formData.reportFormat;

    showReportPreview(data.rapport, formData.reportFormat);
    enableDownloadButton();
    updatePreviewStatus("Pr√™t", "bg-green-100 text-green-800");
  }

  function handleReportError(error) {
    console.error("Error generating report:", error);
    updatePreviewStatus("Erreur", "bg-red-100 text-red-800");
    showErrorState(error.message);
  }

  function showLoadingState() {
    hideAllPreviewStates();
    document.getElementById("previewLoading").classList.remove("hidden");
  }

  function showReportPreview(htmlContent, format) {
    hideAllPreviewStates();

    const previewContent = document.getElementById("previewContent");
    const formatClass = format === "pdf" ? "pdf-preview" : "html-preview";

    previewContent.innerHTML = createPreviewHTML(
      htmlContent,
      format,
      formatClass
    );
    previewContent.classList.remove("hidden");

    applyContentStyling(previewContent);
  }

  function showErrorState(errorMessage) {
    hideAllPreviewStates();

    const previewContent = document.getElementById("previewContent");
    previewContent.innerHTML = createErrorHTML(errorMessage);
    previewContent.classList.remove("hidden");
  }

  function hideAllPreviewStates() {
    document.getElementById("previewPlaceholder").classList.add("hidden");
    document.getElementById("previewContent").classList.add("hidden");
    document.getElementById("previewLoading").classList.add("hidden");
  }

  function updatePreviewStatus(text, classes) {
    const statusElement = document.getElementById("previewStatus");
    statusElement.className = `inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${classes}`;
    statusElement.innerHTML = `<i class="fas fa-eye mr-1"></i>${text}`;
  }

  function enableDownloadButton() {
    const downloadBtn = document.getElementById("downloadReportBtn");
    downloadBtn.disabled = false;
    downloadBtn.classList.remove(
      "disabled:bg-gray-400",
      "disabled:cursor-not-allowed"
    );
  }

  function createPreviewHTML(htmlContent, format, formatClass) {
    return `
      <div class="${formatClass} border rounded-lg p-6 bg-gray-50">
        <div class="mb-4 text-right">
          <span class="text-sm text-gray-600">Format: ${format.toUpperCase()}</span>
        </div>
        <div class="ai-generated-content" id="printable-content">
          ${htmlContent}
        </div>
      </div>
    `;
  }

  function createErrorHTML(errorMessage) {
    return `
      <div class="border rounded-lg p-6 bg-red-50">
        <div class="text-center">
          <i class="fas fa-exclamation-triangle text-red-500 text-2xl mb-3"></i>
          <h4 class="text-lg font-medium text-red-900 mb-2">Erreur lors de la g√©n√©ration</h4>
          <p class="text-red-700">${errorMessage}</p>
        </div>
      </div>
    `;
  }

  function applyContentStyling(previewContent) {
    const aiContent = previewContent.querySelector(".ai-generated-content");
    if (!aiContent) return;

    styleElements(aiContent);
    addIconsToHeaders(aiContent);
  }

  function styleElements(aiContent) {
    const tables = aiContent.querySelectorAll("table");
    tables.forEach((table) => {
      table.className = "w-full border-collapse mb-6";
      styleTableHeaders(table);
      styleTableCells(table);
    });

    styleHeadings(aiContent);

    styleLists(aiContent);

    styleParagraphs(aiContent);

    styleSections(aiContent);
  }

  function styleTableHeaders(table) {
    const ths = table.querySelectorAll("th");
    ths.forEach((th) => {
      th.className =
        "px-4 py-2 text-left border-b border-gray-200 bg-gray-50 font-semibold text-gray-700";
    });
  }

  function styleTableCells(table) {
    const tds = table.querySelectorAll("td");
    tds.forEach((td) => {
      td.className = "px-4 py-2 border-b border-gray-100";
    });
  }

  function styleHeadings(aiContent) {
    const h2s = aiContent.querySelectorAll("h2");
    h2s.forEach((h2) => {
      h2.className = "text-2xl font-bold text-gray-900 mb-4";
    });

    const h3s = aiContent.querySelectorAll("h3");
    h3s.forEach((h3) => {
      h3.className = "text-lg font-semibold mb-3 text-blue-600";
    });
  }

  function styleLists(aiContent) {
    const uls = aiContent.querySelectorAll("ul");
    uls.forEach((ul) => {
      ul.className = "list-disc list-inside mb-4 space-y-2";
      const lis = ul.querySelectorAll("li");
      lis.forEach((li) => {
        li.className = "text-gray-700";
      });
    });
  }

  function styleParagraphs(aiContent) {
    const ps = aiContent.querySelectorAll("p");
    ps.forEach((p) => {
      p.className = "text-gray-600 mb-3";
    });
  }

  function styleSections(aiContent) {
    const sections = aiContent.querySelectorAll("div");
    sections.forEach((section) => {
      if (section.querySelector("h3")) {
        section.className = "bg-white rounded-lg p-4 mb-6 shadow";
      }
    });
  }

  function addIconsToHeaders(aiContent) {
    const h3Icons = {
      "Bilan Calorique": "üî•",
      Macronutriments: "üìä",
      Repas: "üçΩÔ∏è",
      Hydratation: "üíß",
      Recommandations: "üí°",
    };

    const h3s = aiContent.querySelectorAll("h3");
    h3s.forEach((h3) => {
      const text = h3.textContent.trim();
      for (const [key, icon] of Object.entries(h3Icons)) {
        if (text.includes(key)) {
          h3.innerHTML = `<i class="mr-2">${icon}</i>${text}`;
          break;
        }
      }
    });
  }

  function downloadReport() {
    if (!currentReportData) {
      alert("Veuillez d'abord g√©n√©rer un rapport");
      return;
    }

    const filename = generateFilename();

    if (currentReportFormat === "html") {
      downloadAsHTML(filename);
    } else {
      downloadAsPDF(filename);
    }
  }

  function generateFilename() {
    const dateString = currentReportData.date.replace(/\//g, "_");
    return `rapport_nutritionnel_${dateString}`;
  }

  function downloadAsHTML(filename) {
    const htmlContent = createFullHTMLDocument();
    const blob = new Blob([htmlContent], { type: "text/html" });
    downloadBlob(blob, filename + ".html");
  }

  async function downloadAsPDF(filename) {
    try {
      updatePreviewStatus("G√©n√©ration PDF...", "bg-yellow-100 text-yellow-800");

      const { jsPDF } = window.jspdf;
      const doc = new jsPDF("p", "mm", "a4");

      const contentElement = document.getElementById("printable-content");
      if (!contentElement) {
        throw new Error("Content not found");
      }

      const pageWidth = 210;
      const pageHeight = 297;
      const margin = 20;
      const lineHeight = 7;
      const maxWidth = pageWidth - margin * 2;
      let currentY = margin;

      doc.setFont("helvetica", "normal");

      doc.setFontSize(22);
      doc.setTextColor(31, 41, 55);
      doc.text("Rapport Nutritionnel Hebdomadaire", pageWidth / 2, currentY, {
        align: "center",
      });

      currentY += 10;
      doc.setFontSize(12);
      doc.setTextColor(107, 114, 128);
      const weekStart = new Date(
        Date.now() - 7 * 24 * 60 * 60 * 1000
      ).toLocaleDateString("fr-FR");
      doc.text(
        `P√©riode: ${weekStart} - ${currentReportData.date}`,
        pageWidth / 2,
        currentY,
        {
          align: "center",
        }
      );

      currentY += 15;
      doc.setDrawColor(59, 130, 246);
      doc.setLineWidth(1);
      doc.line(margin, currentY, pageWidth - margin, currentY);
      currentY += 15;

      const tempDiv = document.createElement("div");
      tempDiv.innerHTML = contentElement.innerHTML;

      const sections = tempDiv.children;
      for (let i = 0; i < sections.length; i++) {
        const section = sections[i];
        currentY = await processSectionToPDF(
          doc,
          section,
          currentY,
          margin,
          maxWidth,
          lineHeight,
          pageWidth,
          pageHeight
        );

        currentY += 10;

        if (currentY > pageHeight - 40) {
          doc.addPage();
          currentY = margin;
        }
      }

      const totalPages = doc.internal.getNumberOfPages();
      for (let i = 1; i <= totalPages; i++) {
        doc.setPage(i);
        doc.setFontSize(10);
        doc.setTextColor(107, 114, 128);
        doc.text(
          `Page ${i} sur ${totalPages}`,
          pageWidth / 2,
          pageHeight - 10,
          { align: "center" }
        );
        doc.text("G√©n√©r√© par NutriTrack", pageWidth - margin, pageHeight - 10, {
          align: "right",
        });
      }

      doc.save(filename + ".pdf");
      updatePreviewStatus("Pr√™t", "bg-green-100 text-green-800");
    } catch (error) {
      console.error("Error generating PDF:", error);
      updatePreviewStatus("Erreur PDF", "bg-red-100 text-red-800");
      alert("Erreur lors de la g√©n√©ration du PDF: " + error.message);
    }
  }

  async function processSectionToPDF(
    doc,
    section,
    currentY,
    margin,
    maxWidth,
    lineHeight,
    pageWidth,
    pageHeight
  ) {
    const tagName = section.tagName.toLowerCase();

    switch (tagName) {
      case "h2":
        currentY = addHeadingToPDF(
          doc,
          section.textContent,
          currentY,
          margin,
          maxWidth,
          16,
          true
        );
        break;
      case "h3":
        currentY = addHeadingToPDF(
          doc,
          section.textContent,
          currentY,
          margin,
          maxWidth,
          14,
          false
        );
        break;
      case "p":
        currentY = addTextToPDF(
          doc,
          section.textContent,
          currentY,
          margin,
          maxWidth,
          lineHeight
        );
        break;
      case "ul":
        currentY = addListToPDF(
          doc,
          section,
          currentY,
          margin,
          maxWidth,
          lineHeight
        );
        break;
      case "table":
        currentY = await addTableToPDF(
          doc,
          section,
          currentY,
          margin,
          maxWidth,
          lineHeight
        );
        break;
      case "div":
        for (let child of section.children) {
          currentY = await processSectionToPDF(
            doc,
            child,
            currentY,
            margin,
            maxWidth,
            lineHeight,
            pageWidth,
            pageHeight
          );
        }
        break;
    }

    if (currentY > pageHeight - 40) {
      doc.addPage();
      return margin;
    }

    return currentY;
  }

  function addHeadingToPDF(
    doc,
    text,
    currentY,
    margin,
    maxWidth,
    fontSize,
    isMajor
  ) {
    const cleanText = text.replace(/[üî•üìäüçΩÔ∏èüíßüí°]/g, "").trim();

    doc.setFontSize(fontSize);
    doc.setFont("helvetica", "bold");

    if (isMajor) {
      doc.setTextColor(31, 41, 55);
    } else {
      doc.setTextColor(59, 130, 246);
    }

    doc.text(cleanText, margin, currentY);

    if (isMajor) {
      doc.setDrawColor(229, 231, 235);
      doc.setLineWidth(0.5);
      doc.line(margin, currentY + 2, margin + maxWidth, currentY + 2);
    }

    return currentY + fontSize * 0.8 + 5;
  }

  function addTextToPDF(doc, text, currentY, margin, maxWidth, lineHeight) {
    if (!text || text.trim() === "") return currentY;

    doc.setFontSize(11);
    doc.setFont("helvetica", "normal");
    doc.setTextColor(75, 85, 99);

    const lines = doc.splitTextToSize(text, maxWidth);

    for (const line of lines) {
      doc.text(line, margin, currentY);
      currentY += lineHeight;
    }

    return currentY + 3;
  }

  function addListToPDF(
    doc,
    listElement,
    currentY,
    margin,
    maxWidth,
    lineHeight
  ) {
    doc.setFontSize(11);
    doc.setFont("helvetica", "normal");
    doc.setTextColor(75, 85, 99);

    const items = listElement.querySelectorAll("li");

    for (const item of items) {
      const text = item.textContent;
      const lines = doc.splitTextToSize(`‚Ä¢ ${text}`, maxWidth - 10);

      for (let i = 0; i < lines.length; i++) {
        if (i === 0) {
          doc.text(lines[i], margin + 5, currentY);
        } else {
          doc.text(lines[i], margin + 10, currentY);
        }
        currentY += lineHeight;
      }
      currentY += 2;
    }

    return currentY + 3;
  }

  async function addTableToPDF(
    doc,
    tableElement,
    currentY,
    margin,
    maxWidth,
    lineHeight
  ) {
    const rows = tableElement.querySelectorAll("tr");
    if (rows.length === 0) return currentY;

    const columnCount = rows[0].querySelectorAll("th, td").length;
    const columnWidth = maxWidth / columnCount;

    const headerRow = rows[0];
    const headers = headerRow.querySelectorAll("th");

    if (headers.length > 0) {
      doc.setFontSize(10);
      doc.setFont("helvetica", "bold");
      doc.setTextColor(55, 65, 81);
      doc.setFillColor(249, 250, 251);

      doc.rect(margin, currentY - 5, maxWidth, lineHeight + 2, "F");

      for (let i = 0; i < headers.length; i++) {
        const text = headers[i].textContent.trim();
        doc.text(text, margin + i * columnWidth + 2, currentY);
      }

      currentY += lineHeight + 2;

      doc.setDrawColor(229, 231, 235);
      doc.setLineWidth(0.5);
      doc.line(margin, currentY, margin + maxWidth, currentY);
      currentY += 3;
    }

    doc.setFont("helvetica", "normal");
    doc.setTextColor(75, 85, 99);

    for (let i = headers.length > 0 ? 1 : 0; i < rows.length; i++) {
      const cells = rows[i].querySelectorAll("td");

      for (let j = 0; j < cells.length; j++) {
        const text = cells[j].textContent.trim();
        const cellText = doc.splitTextToSize(text, columnWidth - 4);
        doc.text(cellText[0] || "", margin + j * columnWidth + 2, currentY);
      }

      currentY += lineHeight + 1;

      if (i < rows.length - 1) {
        doc.setDrawColor(243, 244, 246);
        doc.setLineWidth(0.2);
        doc.line(margin, currentY, margin + maxWidth, currentY);
      }
    }

    return currentY + 5;
  }

  function createFullHTMLDocument() {
    return `
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rapport Nutritionnel - ${currentReportData.date}</title>
    <style>
        ${getHTMLDownloadStyles()}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìä Rapport Nutritionnel Hebdomadaire</h1>
            <div class="date-info">
                <span class="date-label">P√©riode d'analyse:</span>
                <span class="date-value">${new Date(
                  Date.now() - 7 * 24 * 60 * 60 * 1000
                ).toLocaleDateString("fr-FR")} - ${
      currentReportData.date
    }</span>
            </div>
            <div class="report-meta">
                <span class="generated-by">G√©n√©r√© par NutriTrack</span>
                <span class="generated-time">Le ${new Date().toLocaleString(
                  "fr-FR"
                )}</span>
            </div>
        </div>

        <div class="content">
            ${
              currentReportData.htmlContent ||
              "<p>Contenu du rapport non disponible</p>"
            }
        </div>

        <div class="footer">
            <p>Ce rapport a √©t√© g√©n√©r√© automatiquement par l'intelligence artificielle de NutriTrack.</p>
            <p>Pour toute question m√©dicale, consultez un professionnel de sant√©.</p>
        </div>
    </div>
</body>
</html>`;
  }

  function getHTMLDownloadStyles() {
    return `
        /* Reset and base styles */
        * { margin: 0; padding: 0; box-sizing: border-box; }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #1F2937;
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            min-height: 100vh;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            border-radius: 12px;
            overflow: hidden;
        }

        /* Header styles */
        .header {
            background: linear-gradient(135deg, #3B82F6 0%, #1E40AF 100%);
            color: white;
            padding: 30px;
            text-align: center;
            position: relative;
        }

        .header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="50" cy="50" r="2" fill="rgba(255,255,255,0.1)"/></svg>') repeat;
            opacity: 0.1;
        }

        .header h1 {
            font-size: 32px;
            margin-bottom: 15px;
            font-weight: 700;
            text-shadow: 0 2px 4px rgba(0,0,0,0.2);
            position: relative;
            z-index: 1;
        }

        .date-info {
            background: rgba(255,255,255,0.2);
            padding: 10px 20px;
            border-radius: 25px;
            display: inline-block;
            margin-bottom: 15px;
            position: relative;
            z-index: 1;
        }

        .date-label {
            font-size: 14px;
            opacity: 0.9;
            margin-right: 8px;
        }

        .date-value {
            font-size: 16px;
            font-weight: 600;
        }

        .report-meta {
            font-size: 12px;
            opacity: 0.8;
            position: relative;
            z-index: 1;
        }

        .generated-by, .generated-time {
            display: block;
            margin: 2px 0;
        }

        /* Content styles */
        .content {
            padding: 40px;
        }

        h2 {
            color: #1F2937;
            font-size: 24px;
            margin: 25px 0 15px 0;
            border-bottom: 3px solid #3B82F6;
            padding-bottom: 8px;
            font-weight: 600;
        }

        h3 {
            color: #3B82F6;
            font-size: 18px;
            margin: 20px 0 12px 0;
            padding: 12px 16px;
            background: linear-gradient(135deg, #EFF6FF 0%, #DBEAFE 100%);
            border-left: 4px solid #3B82F6;
            border-radius: 0 8px 8px 0;
            font-weight: 600;
        }

        p {
            color: #4B5563;
            margin-bottom: 12px;
            font-size: 15px;
            line-height: 1.7;
        }

        /* Table styles */
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0,0,0,0.05);
        }

        th, td {
            padding: 14px 16px;
            text-align: left;
            border-bottom: 1px solid #E5E7EB;
        }

        th {
            background: linear-gradient(135deg, #F8FAFC 0%, #E2E8F0 100%);
            font-weight: 600;
            color: #374151;
            font-size: 14px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        tr:nth-child(even) {
            background-color: #F9FAFB;
        }

        tr:hover {
            background-color: #F3F4F6;
            transition: background-color 0.2s ease;
        }

        td {
            font-size: 14px;
            color: #4B5563;
        }

        /* List styles */
        ul {
            list-style: none;
            padding-left: 0;
            margin: 15px 0;
        }

        li {
            margin-bottom: 8px;
            color: #4B5563;
            padding: 8px 12px;
            background: #F9FAFB;
            border-left: 3px solid #10B981;
            border-radius: 0 6px 6px 0;
            transition: all 0.2s ease;
        }

        li:hover {
            background: #F0FDF4;
            transform: translateX(4px);
        }

        li:before {
            content: '‚úì';
            color: #10B981;
            font-weight: bold;
            margin-right: 8px;
        }

        strong {
            color: #1F2937;
            font-weight: 600;
        }

        /* Section styling */
        .content > div {
            margin-bottom: 30px;
            padding: 20px;
            background: #FEFEFE;
            border-radius: 10px;
            border: 1px solid #E5E7EB;
            box-shadow: 0 2px 4px rgba(0,0,0,0.02);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .content > div:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        }

        /* Footer styles */
        .footer {
            background: #F8FAFC;
            padding: 25px 40px;
            border-top: 1px solid #E5E7EB;
            text-align: center;
            color: #6B7280;
            font-size: 13px;
            line-height: 1.6;
        }

        .footer p {
            margin: 5px 0;
            color: #6B7280;
        }

        /* Print styles */
        @media print {
            body {
                background: white;
                margin: 0;
            }

            .container {
                box-shadow: none;
                max-width: none;
                margin: 0;
            }

            .header {
                background: #3B82F6 !important;
                -webkit-print-color-adjust: exact;
                color-adjust: exact;
            }

            .content > div {
                break-inside: avoid;
                page-break-inside: avoid;
            }

            h2, h3 {
                page-break-after: avoid;
            }

            table {
                page-break-inside: avoid;
            }
        }

        /* Responsive design */
        @media (max-width: 768px) {
            .container {
                margin: 0;
                border-radius: 0;
            }

            .header, .content, .footer {
                padding: 20px;
            }

            .header h1 {
                font-size: 24px;
            }

            h2 {
                font-size: 20px;
            }

            h3 {
                font-size: 16px;
            }

            table {
                font-size: 12px;
            }

            th, td {
                padding: 8px;
            }
        }
    `;
  }

  function downloadBlob(blob, filename) {
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }
</script>
