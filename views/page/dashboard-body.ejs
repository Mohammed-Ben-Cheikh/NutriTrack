<div class="mb-6">
  <h2 class="text-2xl font-bold text-gray-900">
    Générateur de Rapports Quotidiens
  </h2>
  <p class="text-gray-600">
    Créez et téléchargez vos rapports nutritionnels quotidiens en format PDF ou
    HTML
  </p>
</div>
<!-- Report Preview Section -->
<div class="bg-white rounded-lg shadow-lg border border-gray-200">
  <div class="p-4 sm:p-6 border-b border-gray-200">
    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
      <h3 class="text-lg sm:text-xl font-semibold text-gray-900 mb-2 sm:mb-0">
        Aperçu du Rapport
      </h3>
      <div class="flex items-center space-x-2">
        <span
          id="previewStatus"
          class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800"
        >
          <i class="fas fa-eye mr-1"></i>
          En attente
        </span>
      </div>
    </div>
  </div>

  <!-- Preview Content -->
  <div class="p-6">
    <div id="reportPreview" class="min-h-64">
      <!-- Default state -->
      <div id="previewPlaceholder" class="text-center py-12">
        <div
          class="inline-flex items-center justify-center w-16 h-16 bg-gray-100 rounded-full mb-4"
        >
          <i class="fas fa-file-alt text-gray-400 text-2xl"></i>
        </div>
        <h4 class="text-lg font-medium text-gray-900 mb-2">
          Aucun rapport généré
        </h4>
        <p class="text-gray-600">
          Sélectionnez une date et cliquez sur "Générer le Rapport" pour voir
          l'aperçu
        </p>
      </div>

      <!-- Loading state -->
      <div id="previewLoading" class="text-center py-12 hidden">
        <div
          class="inline-flex items-center justify-center w-16 h-16 bg-blue-100 rounded-full mb-4"
        >
          <i class="fas fa-spinner fa-spin text-blue-600 text-2xl"></i>
        </div>
        <h4 class="text-lg font-medium text-gray-900 mb-2">
          Génération en cours...
        </h4>
        <p class="text-gray-600">
          Veuillez patienter pendant que nous créons votre rapport
        </p>
      </div>

      <!-- Preview content will be inserted here -->
      <div id="previewContent" class="hidden">
        <!-- Report content will be dynamically loaded here -->
      </div>
    </div>
  </div>
</div>
<br />
<!-- Report Generation Controls -->
<div class="bg-white rounded-lg shadow p-6 mb-8">
  <div class="mb-6">
    <h3 class="text-lg font-semibold text-gray-900 mb-4">
      Configuration du Rapport
    </h3>

    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
      <!-- Date Selection -->
      <div>
        <label
          for="reportDate"
          class="block text-sm font-medium text-gray-700 mb-2"
        >
          <i class="fas fa-calendar mr-2 text-blue-500"></i>Date du rapport
        </label>
        <input
          type="date"
          id="reportDate"
          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        />
      </div>

      <!-- Report Type -->
      <div>
        <label
          for="reportType"
          class="block text-sm font-medium text-gray-700 mb-2"
        >
          <i class="fas fa-file-alt mr-2 text-green-500"></i>Type de rapport
        </label>
        <select
          id="reportType"
          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        >
          <option value="1">Rapport nutritionnel complet</option>
          <option value="2">Analyse des macronutriments</option>
          <option value="3">Bilan calorique détaillé</option>
          <option value="4">Suivi d'hydratation</option>
          <option value="5">Rapport personnalisé</option>
        </select>
      </div>

      <!-- Format Selection (PDF only) -->
      <div>
        <label
          for="reportFormat"
          class="block text-sm font-medium text-gray-700 mb-2"
        >
          <i class="fas fa-file-pdf mr-2 text-red-500"></i>Format de sortie
        </label>
        <select
          id="reportFormat"
          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-gray-50"
          disabled
        >
          <option value="pdf" selected>PDF</option>
        </select>
      </div>
    </div>

    <!-- Generate Button -->
    <div class="mt-6 flex flex-col sm:flex-row gap-4">
      <button
        id="generateReportBtn"
        class="flex-1 bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors duration-200 flex items-center justify-center"
        onclick="generateReport()"
      >
        <i class="fas fa-magic mr-2"></i>
        Générer le Rapport
      </button>

      <button
        id="downloadReportBtn"
        class="flex-1 bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg font-medium transition-colors duration-200 flex items-center justify-center disabled:bg-gray-400 disabled:cursor-not-allowed"
        disabled
        onclick="downloadReport()"
      >
        <i class="fas fa-download mr-2"></i>
        Télécharger
      </button>
    </div>
  </div>
</div>
<script>
  // Sample nutrition data for report generation
  const sampleNutritionData = {
    daily: {
      date: new Date().toLocaleDateString("fr-FR"),
      calories: {
        consumed: 2150,
        target: 2200,
        remaining: 50,
      },
      macros: {
        protein: { consumed: 85, target: 90, unit: "g" },
        carbs: { consumed: 280, target: 300, unit: "g" },
        fat: { consumed: 65, target: 70, unit: "g" },
      },
      meals: [
        { name: "Petit-déjeuner", calories: 450, time: "08:00" },
        { name: "Déjeuner", calories: 650, time: "12:30" },
        { name: "Collation", calories: 200, time: "16:00" },
        { name: "Dîner", calories: 850, time: "19:30" },
      ],
      hydration: { consumed: 1.8, target: 2.0, unit: "L" },
    },
  };

  let currentReportData = null;
  let currentReportFormat = "pdf";

  // Set today's date as default
  document.addEventListener("DOMContentLoaded", function () {
    console.log("DOM loaded, initializing...");
    const today = new Date().toISOString().split("T")[0];
    const dateInput = document.getElementById("reportDate");
    if (dateInput) {
      dateInput.value = today;
      console.log("Date set to:", today);
    }

    // Add event listeners with error checking
    const generateBtn = document.getElementById("generateReportBtn");
    const downloadBtn = document.getElementById("downloadReportBtn");

    if (generateBtn) {
      generateBtn.addEventListener("click", generateReport);
      console.log("Generate button listener added");
    } else {
      console.error("Generate button not found!");
    }

    if (downloadBtn) {
      downloadBtn.addEventListener("click", downloadReport);
      console.log("Download button listener added");
    } else {
      console.error("Download button not found!");
    }
  });

  // Generate report function
  function generateReport() {
    console.log("Generate report function called");
    const reportDate = document.getElementById("reportDate").value;
    const reportType = document.getElementById("reportType").value;
    const reportFormat = document.getElementById("reportFormat").value;

    if (!reportDate) {
      alert("Veuillez sélectionner une date pour le rapport");
      return;
    }

    console.log("Generating report for:", reportDate, reportType, reportFormat);

    // Show loading state
    showLoading();

    // Update status
    updatePreviewStatus("Génération...", "bg-yellow-100 text-yellow-800");

    // Simulate API call delay
    setTimeout(() => {
      const reportData = generateReportContent(reportDate, reportType);
      currentReportData = reportData;
      currentReportFormat = reportFormat;

      showPreview(reportData, reportFormat);
      enableDownload();
      updatePreviewStatus("Généré", "bg-green-100 text-green-800");
      console.log("Report generated successfully");
    }, 2000);
  }

  // Generate report content based on type
  function generateReportContent(date, type) {
    const data = { ...sampleNutritionData.daily };
    data.date = new Date(date).toLocaleDateString("fr-FR");
    data.type = type;

    return data;
  }

  // Show loading state
  function showLoading() {
    document.getElementById("previewPlaceholder").classList.add("hidden");
    document.getElementById("previewContent").classList.add("hidden");
    document.getElementById("previewLoading").classList.remove("hidden");
  }

  // Show preview content
  function showPreview(data, format) {
    document.getElementById("previewLoading").classList.add("hidden");
    document.getElementById("previewPlaceholder").classList.add("hidden");

    const previewContent = document.getElementById("previewContent");
    previewContent.innerHTML = generatePreviewHTML(data, format);
    previewContent.classList.remove("hidden");
  }

  // Generate preview HTML
  function generatePreviewHTML(data, format) {
    const formatClass = format === "pdf" ? "pdf-preview" : "html-preview";

    return `
      <div class="${formatClass} border rounded-lg p-6 bg-gray-50">
        <div class="mb-6">
          <div class="flex items-center justify-between mb-4">
            <h2 class="text-2xl font-bold text-gray-900">Rapport Nutritionnel Quotidien</h2>
            <span class="text-sm text-gray-600">Format: ${format.toUpperCase()}</span>
          </div>
          <p class="text-gray-600">Date: ${data.date}</p>
        </div>

        <!-- Calories Summary -->
        <div class="bg-white rounded-lg p-4 mb-6 shadow">
          <h3 class="text-lg font-semibold mb-3 text-blue-600">
            <i class="fas fa-fire mr-2"></i>Bilan Calorique
          </h3>
          <div class="grid grid-cols-3 gap-4 text-center">
            <div>
              <div class="text-2xl font-bold text-green-600">${
                data.calories.consumed
              }</div>
              <div class="text-sm text-gray-600">Consommées</div>
            </div>
            <div>
              <div class="text-2xl font-bold text-blue-600">${
                data.calories.target
              }</div>
              <div class="text-sm text-gray-600">Objectif</div>
            </div>
            <div>
              <div class="text-2xl font-bold text-orange-600">${
                data.calories.remaining
              }</div>
              <div class="text-sm text-gray-600">Restantes</div>
            </div>
          </div>
        </div>

        <!-- Macronutrients -->
        <div class="bg-white rounded-lg p-4 mb-6 shadow">
          <h3 class="text-lg font-semibold mb-3 text-purple-600">
            <i class="fas fa-chart-pie mr-2"></i>Macronutriments
          </h3>
          <div class="space-y-3">
            ${Object.entries(data.macros)
              .map(
                ([key, macro]) => `
              <div class="flex items-center justify-between">
                <span class="capitalize font-medium">${
                  key === "carbs"
                    ? "Glucides"
                    : key === "protein"
                    ? "Protéines"
                    : "Lipides"
                }</span>
                <span>${macro.consumed}${macro.unit} / ${macro.target}${
                  macro.unit
                }</span>
                <div class="w-24 bg-gray-200 rounded-full h-2">
                  <div class="bg-purple-600 h-2 rounded-full" style="width: ${
                    (macro.consumed / macro.target) * 100
                  }%"></div>
                </div>
              </div>
            `
              )
              .join("")}
          </div>
        </div>

        <!-- Meals -->
        <div class="bg-white rounded-lg p-4 mb-6 shadow">
          <h3 class="text-lg font-semibold mb-3 text-green-600">
            <i class="fas fa-utensils mr-2"></i>Repas de la journée
          </h3>
          <div class="space-y-2">
            ${data.meals
              .map(
                (meal) => `
              <div class="flex items-center justify-between py-2 border-b border-gray-100 last:border-b-0">
                <div>
                  <span class="font-medium">${meal.name}</span>
                  <span class="text-sm text-gray-600 ml-2">${meal.time}</span>
                </div>
                <span class="font-semibold text-blue-600">${meal.calories} kcal</span>
              </div>
            `
              )
              .join("")}
          </div>
        </div>

        <!-- Hydration -->
        <div class="bg-white rounded-lg p-4 shadow">
          <h3 class="text-lg font-semibold mb-3 text-blue-600">
            <i class="fas fa-tint mr-2"></i>Hydratation
          </h3>
          <div class="flex items-center justify-between">
            <span>Consommation d'eau</span>
            <span class="font-semibold">${data.hydration.consumed}${
      data.hydration.unit
    } / ${data.hydration.target}${data.hydration.unit}</span>
          </div>
          <div class="mt-2 bg-gray-200 rounded-full h-3">
            <div class="bg-blue-500 h-3 rounded-full" style="width: ${
              (data.hydration.consumed / data.hydration.target) * 100
            }%"></div>
          </div>
        </div>
      </div>
    `;
  }

  // Update preview status
  function updatePreviewStatus(text, classes) {
    const statusElement = document.getElementById("previewStatus");
    statusElement.className = `inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${classes}`;
    statusElement.innerHTML = `<i class="fas fa-eye mr-1"></i>${text}`;
  }

  // Enable download button
  function enableDownload() {
    const downloadBtn = document.getElementById("downloadReportBtn");
    downloadBtn.disabled = false;
    downloadBtn.classList.remove(
      "disabled:bg-gray-400",
      "disabled:cursor-not-allowed"
    );
  }

  // Download report function
  function downloadReport() {
    console.log("Download report function called");
    if (!currentReportData) {
      alert("Veuillez d'abord générer un rapport");
      return;
    }

    const format = currentReportFormat;
    const filename = `rapport_nutritionnel_${currentReportData.date.replace(
      /\//g,
      "_"
    )}.${format}`;

    if (format === "html") {
      downloadAsHTML(filename);
    } else {
      downloadAsPDF(filename);
    }
  }

  // Download as HTML
  function downloadAsHTML(filename) {
    const htmlContent = `
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rapport Nutritionnel - ${currentReportData.date}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
        .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #3B82F6; padding-bottom: 20px; }
        .section { margin-bottom: 30px; padding: 20px; border: 1px solid #E5E7EB; border-radius: 8px; }
        .section h3 { color: #1F2937; margin-bottom: 15px; }
        .calories-grid { display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px; text-align: center; }
        .macro-item { display: flex; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #F3F4F6; }
        .meal-item { display: flex; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #F3F4F6; }
        .progress-bar { width: 100%; height: 10px; background-color: #E5E7EB; border-radius: 5px; overflow: hidden; }
        .progress-fill { height: 100%; background-color: #3B82F6; }
    </style>
</head>
<body>
${generatePreviewHTML(currentReportData, "html")
  .replace(/<div class="html-preview[^>]*>/, "")
  .replace(/<\/div>$/, "")}
</body>
</html>`;

    const blob = new Blob([htmlContent], { type: "text/html" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = filename;
    a.click();
    URL.revokeObjectURL(url);
  }

  // Download as PDF (simplified - in real app, you'd use a PDF library)
  function downloadAsPDF(filename) {
    // For demo purposes, we'll create a simple text file
    // In a real application, you would use a library like jsPDF or send to backend
    const pdfContent = `
RAPPORT NUTRITIONNEL QUOTIDIEN
Date: ${currentReportData.date}

BILAN CALORIQUE:
- Consommées: ${currentReportData.calories.consumed} kcal
- Objectif: ${currentReportData.calories.target} kcal
- Restantes: ${currentReportData.calories.remaining} kcal

MACRONUTRIMENTS:
${Object.entries(currentReportData.macros)
  .map(
    ([key, macro]) =>
      `- ${key}: ${macro.consumed}${macro.unit} / ${macro.target}${macro.unit}`
  )
  .join("\n")}

REPAS:
${currentReportData.meals
  .map((meal) => `- ${meal.name} (${meal.time}): ${meal.calories} kcal`)
  .join("\n")}

HYDRATATION:
- Eau consommée: ${currentReportData.hydration.consumed}${
      currentReportData.hydration.unit
    } / ${currentReportData.hydration.target}${currentReportData.hydration.unit}
`;

    const blob = new Blob([pdfContent], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = filename.replace(".pdf", ".txt"); // For demo, saving as txt
    a.click();
    URL.revokeObjectURL(url);

    alert(
      "Note: Pour une vraie application, utilisez une bibliothèque PDF comme jsPDF"
    );
  }
</script>
