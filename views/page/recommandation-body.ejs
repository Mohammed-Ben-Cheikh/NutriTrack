<!-- Header -->
<div class="mb-6">
  <h2 class="text-2xl font-bold text-gray-900">
    Recommandations Personnalisées IA
  </h2>
  <p class="text-gray-600">
    Renseignez vos informations pour obtenir des recommandations nutritionnelles
    personnalisées adaptées à vos objectifs et besoins.
  </p>
</div>

<!-- Quick Stats Cards -->
<div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
  <div class="bg-white rounded-lg shadow p-6">
    <div class="flex items-center justify-between">
      <div>
        <p class="text-sm font-medium text-gray-600">Conseiller IA</p>
        <p class="text-2xl font-bold text-gray-900">Actif</p>
      </div>
      <div class="p-3 bg-green-100 rounded-full">
        <i class="fas fa-user-md text-green-600 text-xl"></i>
      </div>
    </div>
    <p class="mt-4 text-xs text-gray-500">Recommandations personnalisées</p>
  </div>

  <div class="bg-white rounded-lg shadow p-6">
    <div class="flex items-center justify-between">
      <div>
        <p class="text-sm font-medium text-gray-600">Objectifs</p>
        <p class="text-2xl font-bold text-gray-900">Multiples</p>
      </div>
      <div class="p-3 bg-blue-100 rounded-full">
        <i class="fas fa-bullseye text-blue-600 text-xl"></i>
      </div>
    </div>
    <p class="mt-4 text-xs text-gray-500">Perte/prise de poids, santé</p>
  </div>

  <div class="bg-white rounded-lg shadow p-6">
    <div class="flex items-center justify-between">
      <div>
        <p class="text-sm font-medium text-gray-600">Confidentialité</p>
        <p class="text-2xl font-bold text-gray-900">Sécurisé</p>
      </div>
      <div class="p-3 bg-purple-100 rounded-full">
        <i class="fas fa-lock text-purple-600 text-xl"></i>
      </div>
    </div>
    <p class="mt-4 text-xs text-gray-500">Données privées protégées</p>
  </div>
</div>

<!-- Error Section -->
<div
  id="errorSection"
  class="rounded-lg border border-red-200 bg-red-50 p-4 mb-6 hidden"
>
  <div class="flex">
    <div class="flex-shrink-0">
      <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
        <path
          fill-rule="evenodd"
          d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
          clip-rule="evenodd"
        />
      </svg>
    </div>
    <div class="ml-3">
      <h3 class="text-sm font-medium text-red-800">Erreur de génération</h3>
      <p id="errorMessage" class="text-sm text-red-700 mt-1"></p>
    </div>
  </div>
</div>

<div class="grid grid-cols-1 xl:grid-cols-3 gap-6">
  <div class="xl:col-span-2">
    <!-- Recommendation Form Section -->
    <div class="bg-white rounded-lg shadow">
      <div class="p-6 border-b border-gray-200">
        <h3 class="text-lg font-semibold text-gray-900">
          Vos informations personnelles
        </h3>
        <p class="text-sm text-gray-500">
          Complétez vos informations pour obtenir des recommandations adaptées à
          votre profil.
        </p>
      </div>

      <form id="recommendationForm" class="p-6 space-y-6">
        <div class="flex justify-center">
          <button
            type="submit"
            id="generateBtn"
            class="px-8 py-3 bg-indigo-600 text-white font-semibold rounded-lg shadow-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors flex items-center"
          >
            <span id="btnText">Générer les recommandations</span>
            <div id="btnSpinner" class="loading-spinner ml-2 hidden"></div>
          </button>
        </div>
      </form>
    </div>

    <!-- Results Section -->
    <div id="resultsSection" class="bg-white rounded-lg shadow mt-6 hidden">
      <div class="p-6 border-b border-gray-200">
        <div class="flex items-center">
          <svg
            class="h-6 w-6 text-green-500 mr-2"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
            />
          </svg>
          <h3 class="text-lg font-semibold text-gray-900">
            Vos recommandations personnalisées
          </h3>
        </div>
      </div>

      <div class="p-6">
        <div
          id="recommendationResult"
          class="prose max-w-none border-l-4 border-green-500 pl-4 bg-green-50 p-4 rounded-r-lg"
        ></div>

        <div class="mt-6 pt-6 border-t border-gray-200">
          <div
            class="mb-4 p-4 bg-green-50 border border-green-200 rounded-md hidden"
            id="successSection"
          >
            <div class="flex">
              <div class="flex-shrink-0">
                <svg
                  class="h-5 w-5 text-green-400"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fill-rule="evenodd"
                    d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                    clip-rule="evenodd"
                  />
                </svg>
              </div>
              <div class="ml-3">
                <p
                  id="successMessage"
                  class="text-sm font-medium text-green-800"
                ></p>
              </div>
            </div>
          </div>
          <div class="flex flex-col sm:flex-row gap-3 flex justify-between">
            <button
              id="newRecommendationBtn"
              class="px-6 py-3 bg-white border border-gray-300 text-gray-700 font-medium rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition-colors"
            >
              <i class="fas fa-redo mr-2"></i>
              Nouvelles recommandations
            </button>
            <div id="saveSection">
              <button
                id="saveRecommendationBtn"
                class="px-8 py-3 bg-indigo-600 text-white font-semibold rounded-lg shadow-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors flex items-center justify-center"
              >
                <i class="fas fa-save mr-2"></i>
                Enregistrer les recommandations
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Sidebar -->
  <div class="space-y-6">
    <div class="bg-white rounded-lg shadow p-6">
      <h3 class="text-lg font-semibold text-gray-900">Guide d'utilisation</h3>
      <ul class="mt-4 space-y-3 text-sm text-gray-600">
        <li class="flex items-start space-x-3">
          <span class="mt-1 h-2 w-2 rounded-full bg-indigo-500"></span>
          <span
            >Remplissez tous les champs obligatoires pour une analyse
            précise.</span
          >
        </li>
        <li class="flex items-start space-x-3">
          <span class="mt-1 h-2 w-2 rounded-full bg-indigo-500"></span>
          <span>Soyez honnête sur votre niveau d'activité physique.</span>
        </li>
        <li class="flex items-start space-x-3">
          <span class="mt-1 h-2 w-2 rounded-full bg-indigo-500"></span>
          <span>Mentionnez toutes vos allergies et intolérances.</span>
        </li>
        <li class="flex items-start space-x-3">
          <span class="mt-1 h-2 w-2 rounded-full bg-indigo-500"></span>
          <span>Les recommandations sont générées en temps réel.</span>
        </li>
      </ul>
    </div>

    <div class="bg-white rounded-lg shadow p-6">
      <h3 class="text-lg font-semibold text-gray-900">
        Informations techniques
      </h3>
      <dl class="mt-4 space-y-4">
        <div class="flex items-start justify-between">
          <dt class="text-sm text-gray-500">Algorithme IA</dt>
          <dd class="text-sm font-medium text-gray-900">Avancé</dd>
        </div>
        <div class="flex items-start justify-between">
          <dt class="text-sm text-gray-500">Temps de génération</dt>
          <dd class="text-sm font-medium text-gray-900">3-8 sec</dd>
        </div>
        <div class="flex items-start justify-between">
          <dt class="text-sm text-gray-500">Base de données</dt>
          <dd class="text-sm font-medium text-gray-900">5000+ aliments</dd>
        </div>
        <div class="flex items-start justify-between">
          <dt class="text-sm text-gray-500">Personnalisation</dt>
          <dd class="text-sm font-medium text-gray-900">100%</dd>
        </div>
      </dl>
    </div>
  </div>
</div>

<!-- Librairie Marked pour le rendu Markdown -->
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

<script>
  class RecommendationGenerator {
    constructor() {
      this.initializeElements();
      this.setupEventListeners();
      this.aiResponse = null;
    }

    initializeElements() {
      this.recommendationForm = document.getElementById("recommendationForm");
      this.generateBtn = document.getElementById("generateBtn");
      this.btnText = document.getElementById("btnText");
      this.btnSpinner = document.getElementById("btnSpinner");
      this.resultsSection = document.getElementById("resultsSection");
      this.recommendationResult = document.getElementById(
        "recommendationResult"
      );
      this.errorSection = document.getElementById("errorSection");
      this.errorMessage = document.getElementById("errorMessage");
      this.newRecommendationBtn = document.getElementById(
        "newRecommendationBtn"
      );
      this.saveRecommendationBtn = document.getElementById(
        "saveRecommendationBtn"
      );
      this.saveSection = document.getElementById("saveSection");
    }

    setupEventListeners() {
      // Soumettre le formulaire
      this.recommendationForm.addEventListener("submit", (e) => {
        e.preventDefault();
        this.generateRecommendations();
      });

      // Nouvelles recommandations
      this.newRecommendationBtn.addEventListener("click", () => {
        this.resetForm();
        this.hideResults();
        this.resetSaveButton();
      });

      this.setupSaveButtonListener();
    }

    setupSaveButtonListener() {
      const saveRecommendationBtn = document.getElementById(
        "saveRecommendationBtn"
      );
      if (saveRecommendationBtn) {
        saveRecommendationBtn.addEventListener("click", () => {
          this.saveRecommendation();
        });
      }
    }

    resetSaveButton() {
      this.saveSection.innerHTML = `<button
        id="saveRecommendationBtn"
        class="px-8 py-3 bg-indigo-600 text-white font-semibold rounded-lg shadow-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors flex items-center justify-center"
      >
        <i class="fas fa-save mr-2"></i>
        Enregistrer les recommandations
      </button>`;

      // Réattacher l'event listener
      this.setupSaveButtonListener();
    }

    async generateRecommendations() {
      this.setLoading(true);
      this.hideError();
      this.hideResults();

      try {
        // Collecter les données du formulaire
        const formData = new FormData(this.recommendationForm);
        const userData = Object.fromEntries(formData.entries());
        console.log(userData);

        const response = await fetch("/recommendation-service", {
          method: "POST",
        });

        if (!response.ok) {
          throw new Error(`Erreur HTTP: ${response.status}`);
        }

        const result = await response.json();
        this.aiResponse = result;
        this.showResults(result);
      } catch (error) {
        console.error("Erreur lors de la génération:", error);
        this.showError(
          "Erreur lors de la génération des recommandations. Veuillez réessayer."
        );
      } finally {
        this.setLoading(false);
      }
    }

    async saveRecommendation() {
      try {
        const saveRecommendationBtn = document.getElementById(
          "saveRecommendationBtn"
        );
        saveRecommendationBtn.disabled = true;
        saveRecommendationBtn.innerHTML =
          '<i class="fas fa-spinner fa-spin mr-2"></i>Enregistrement...';

        const response = await fetch("/save/recommandation", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ aiResponse: this.aiResponse }),
        });

        if (!response.ok) {
          throw new Error(`Erreur HTTP: ${response.status}`);
        }

        const result = await response.json();

        if (result.error) {
          saveRecommendationBtn.innerHTML = `<i class="fas fa-exclamation-triangle mr-2"></i>${result.message}`;
          saveRecommendationBtn.className =
            "px-8 py-3 bg-red-600 text-white font-semibold rounded-lg shadow-md cursor-default transition-colors flex items-center justify-center";
          saveRecommendationBtn.disabled = true;
        } else if (result.success) {
          saveRecommendationBtn.innerHTML = `<i class="fas fa-check mr-2"></i>${result.message}`;
          saveRecommendationBtn.className =
            "px-8 py-3 bg-green-600 text-white font-semibold rounded-lg shadow-md cursor-default transition-colors flex items-center justify-center";
          saveRecommendationBtn.disabled = true;
        }
      } catch (error) {
        console.error("Erreur lors de la sauvegarde:", error);
        this.showError(
          "Erreur lors de la sauvegarde des recommandations. Veuillez réessayer."
        );
        const saveRecommendationBtn = document.getElementById(
          "saveRecommendationBtn"
        );
        saveRecommendationBtn.disabled = false;
        saveRecommendationBtn.innerHTML =
          '<i class="fas fa-save mr-2"></i>Enregistrer les recommandations';
      }
    }

    showResults(data) {
      // Si la réponse est une chaîne (texte markdown)
      const content =
        typeof data === "string"
          ? data
          : data.text || "Aucune recommandation disponible.";

      // Convertir le markdown en HTML
      this.recommendationResult.innerHTML = marked.parse(content);
      this.resultsSection.classList.remove("hidden");

      // Scroll vers les résultats
      this.resultsSection.scrollIntoView({ behavior: "smooth" });
    }

    hideResults() {
      this.resultsSection.classList.add("hidden");
    }

    resetForm() {
      this.recommendationForm.reset();
    }

    showError(message) {
      this.errorMessage.textContent = message;
      this.errorSection.classList.remove("hidden");
    }

    hideError() {
      this.errorSection.classList.add("hidden");
    }

    setLoading(isLoading) {
      if (isLoading) {
        this.btnText.textContent = "Génération en cours...";
        this.btnSpinner.classList.remove("hidden");
        this.generateBtn.disabled = true;
      } else {
        this.btnText.textContent = "Générer les recommandations";
        this.btnSpinner.classList.add("hidden");
        this.generateBtn.disabled = false;
      }
    }
  }

  // Initialiser l'application
  document.addEventListener("DOMContentLoaded", () => {
    new RecommendationGenerator();
  });
</script>
